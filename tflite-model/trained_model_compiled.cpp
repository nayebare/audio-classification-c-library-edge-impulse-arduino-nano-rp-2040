/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 11.01.2023 12:54:43

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0033854166977107525, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -125,19,-47,-43,-33,-38,-52,-3,-1,-24,2,110,68,99,-15,-48,-105,-39,-46,-82,-112,-44,-71,-58,-14,16,-127,-38,-39,-80,-107,-25,-57,35,79,39,-70,-49,-4,-49, -41,11,44,-127,-65,43,-16,-93,-28,-4,64,53,31,42,-8,64,-62,-42,-24,-8,-53,-25,-15,-70,-7,-41,-56,-26,3,-8,-67,24,33,-23,-62,-100,-94,-60,-101,-79, -11,-28,-6,12,34,19,25,36,-4,43,45,90,94,124,59,84,-42,-5,-17,71,74,57,58,-7,73,91,1,-15,10,40,-81,-57,-14,-24,-59,-57,7,-10,-10,-54, 
  /* [1][0][][] */ -45,-4,-33,-97,-29,1,-40,-111,-53,8,-27,-103,29,-16,-60,6,-54,-35,-23,-56,-93,8,-63,-87,31,21,-17,-10,-59,65,-18,-47,11,-38,-39,-57,-9,-25,5,10, -86,20,3,-32,-82,52,19,-80,23,21,-45,18,-98,-110,-68,-100,-55,-2,-70,-63,-11,30,58,13,39,-4,-48,-65,-41,13,-40,62,42,22,-38,47,-73,31,62,71, -127,-2,13,13,-9,-68,-56,-114,0,3,-57,-45,32,-21,-83,13,-49,-103,-85,-108,-76,-83,-74,0,-29,-2,23,-71,32,-23,-64,19,73,50,9,13,41,38,40,-8, 
  /* [2][0][][] */ -71,-52,-44,-12,-78,-51,-76,23,-53,-86,-55,4,-18,-24,-63,-103,-30,-34,-45,40,-33,45,36,81,5,25,29,-30,-11,31,-16,38,80,-4,23,43,-13,-52,-11,-37, -116,-41,-26,-41,-78,54,-69,-100,-69,-100,-18,-113,-36,-63,-31,-91,-30,-69,-77,17,-39,-25,5,29,28,52,-32,75,42,32,20,44,43,23,46,-39,54,12,-47,-30, -127,-61,53,-75,-21,-44,-7,-21,-77,-123,-45,-92,-41,-19,-51,-88,-117,-47,-55,-29,51,-16,21,27,-26,38,67,35,-4,-21,8,41,92,37,38,47,0,-82,24,-100, 
  /* [3][0][][] */ -22,64,-22,127,80,-61,3,51,-20,61,56,21,29,105,82,-37,35,25,-70,-43,-4,23,23,-76,46,-3,-24,-30,-57,7,-11,-10,-24,-59,-39,20,-30,76,-12,-65, 48,11,18,8,44,72,51,21,-22,69,-60,48,-14,-35,-17,94,12,94,-5,-82,-38,11,-3,-93,-38,-5,-20,-20,-1,-8,31,-73,-98,20,-22,1,-59,-80,45,-86, 46,-50,77,1,31,-17,41,11,10,-9,34,78,77,45,71,-34,75,66,20,42,-20,-74,-103,-88,-55,-13,-73,66,-69,-39,-82,-85,-61,33,25,67,-53,-5,55,54, 
  /* [4][0][][] */ -83,31,-56,-51,74,-49,19,27,-61,-9,3,63,8,14,1,-61,11,-85,-36,-36,24,13,43,-50,34,15,-13,-25,95,-32,21,-36,90,-18,-56,-72,64,83,-39,57, -111,41,-26,-85,48,19,-69,-21,30,-16,6,-69,-67,-45,-90,-48,70,-83,-47,45,-3,-39,-11,79,38,58,-66,51,39,40,100,85,-11,15,91,-3,40,-72,41,-1, -127,-26,71,-54,68,-41,-53,-18,41,7,31,-45,52,-12,-34,-67,-71,-32,9,25,36,12,104,-48,89,-57,19,61,70,-27,-56,12,44,23,44,62,36,39,50,73, 
  /* [5][0][][] */ 80,8,17,58,18,-14,-7,-27,37,-67,-6,2,61,-20,-35,14,69,52,-34,35,-25,-2,21,-31,-22,-63,67,-18,-8,61,100,55,-57,-20,-44,58,13,-11,-12,-6, 24,-43,-61,127,25,50,56,41,-52,51,-44,-84,-53,-79,-21,-15,59,-55,60,-79,-78,-103,-69,-77,-30,-19,29,52,-29,96,72,86,9,25,18,34,-62,86,42,29, 36,21,-12,-22,28,-21,62,63,61,-81,-21,58,33,37,9,68,66,-44,44,-14,-22,-46,-14,-53,18,33,42,19,56,80,8,-25,-66,-78,43,-69,-34,13,9,76, 
  /* [6][0][][] */ -78,-42,-69,-84,-26,-9,58,32,-51,62,-26,69,52,26,45,39,5,-8,14,-28,10,43,29,57,-13,-60,-72,-56,24,-95,-127,-92,-33,67,15,75,17,-51,-40,71, -77,-38,-17,-19,-32,19,-50,-67,-7,4,29,43,18,52,-48,78,-58,31,-40,82,49,91,77,35,-54,-35,-66,-75,6,-65,-35,-66,-61,-51,11,40,15,57,-2,50, -46,50,28,-3,0,-25,50,24,27,58,28,50,22,62,5,20,-70,-18,5,54,88,27,2,5,-68,-65,38,-47,21,-80,-66,-68,-20,43,66,52,42,-18,48,49, 
  /* [7][0][][] */ -96,-36,-16,-45,16,-40,-29,33,-2,2,-75,-26,5,29,-27,-17,-50,-7,30,-53,66,13,78,70,58,31,-35,-48,56,58,-32,-10,48,-15,10,-24,61,-20,40,40, -73,-5,-13,-38,-63,3,28,27,35,-30,-40,5,-45,-42,24,-66,-3,-25,4,-49,2,0,83,-22,60,37,31,-12,55,75,31,21,27,61,-27,-44,-51,54,40,-18, -127,-52,-48,-97,18,6,25,46,-44,-8,-74,-16,-12,3,-41,12,-20,-13,-30,-10,24,65,21,4,-15,35,39,37,-34,43,-26,-2,-11,22,40,36,-50,-31,19,68, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0031909237150102854, 0.0026878714561462402, 0.0030894225928932428, 0.0026400971692055464, 0.0024857716634869576, 0.0027469804044812918, 0.0028750726487487555, 0.0034304952714592218, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { 3115, 1189, 12329, 24823, -17184, -3595, 4016, -18802, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 1.0802606084325816e-05, 9.0995645223301835e-06, 1.0458982615091372e-05, 8.9378290795139037e-06, 8.4153725765645504e-06, 9.2996733656036668e-06, 9.7333186204195954e-06, 1.1613656170084141e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 12,-81,-17,73,-29,-55,72,-36, 127,-73,-39,-2,-27,-61,47,-47, 87,-86,44,53,7,41,69,-16, 
  /* [1][0][][] */ 63,41,-32,-26,9,-10,60,31, 63,-30,-27,12,-25,21,15,12, 127,39,1,44,53,-1,-16,34, 
  /* [2][0][][] */ -78,67,-93,-44,41,102,-124,-56, 51,6,-71,81,49,-16,-127,75, -24,-70,-82,-62,48,46,-36,28, 
  /* [3][0][][] */ -127,29,-68,-2,-40,115,-121,65, -92,-8,-61,77,67,122,-24,-19, -66,-70,-28,-6,-49,91,-36,-60, 
  /* [4][0][][] */ -18,32,113,-25,57,-43,23,65, -92,23,68,-31,-2,-38,36,86, 6,-50,127,30,-14,53,-28,78, 
  /* [5][0][][] */ -30,-39,-127,41,54,94,-56,37, -85,-59,-106,49,26,86,-104,-55, -46,-6,-27,24,36,24,-94,28, 
  /* [6][0][][] */ 63,28,40,57,46,63,-109,127, 55,8,52,-104,26,121,-61,-61, -59,102,12,-60,82,-60,-79,7, 
  /* [7][0][][] */ -127,-45,-3,12,-26,108,-8,24, -30,-65,-108,43,83,75,-23,-80, -77,-56,-103,14,28,47,-121,52, 
  /* [8][0][][] */ 18,-14,111,-31,-25,-42,66,54, 63,-12,10,43,33,-17,92,37, 90,-31,89,-63,-10,-60,127,23, 
  /* [9][0][][] */ -72,-39,83,-37,47,34,-51,7, -10,69,127,-59,20,15,81,-18, -50,2,115,-8,23,-15,47,33, 
  /* [10][0][][] */ 47,16,127,-32,4,-62,22,48, 98,15,87,1,73,9,115,-41, 9,15,71,-83,-30,-27,127,-9, 
  /* [11][0][][] */ 105,-30,7,45,-5,-24,86,31, 89,48,79,-14,-23,3,57,91, 127,20,-21,50,65,-33,99,44, 
  /* [12][0][][] */ 92,19,-8,-50,48,50,43,-28, -16,11,127,-27,62,-48,60,60, -5,40,30,-52,0,43,6,77, 
  /* [13][0][][] */ 95,-25,-20,77,-46,-44,28,-60, 25,-57,41,1,33,1,-21,-65, 61,-127,-11,65,-17,20,77,-39, 
  /* [14][0][][] */ -98,10,67,37,-77,117,-71,-127, -66,33,-69,11,77,10,-35,-69, -118,67,67,-39,-10,61,-40,-36, 
  /* [15][0][][] */ -2,38,56,34,-57,-102,-36,-21, -68,11,59,-111,72,59,90,1, 19,-77,127,-91,-28,34,-78,48, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.004821734968572855, 0.0052944524213671684, 0.002970617963001132, 0.0030256249010562897, 0.003962554968893528, 0.0042626685462892056, 0.0025393413379788399, 0.0033943592570722103, 0.0046220696531236172, 0.0044908574782311916, 0.0038328655064105988, 0.0042391354218125343, 0.0039711259305477142, 0.0042578014545142651, 0.0030009050387889147, 0.002775620436295867, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { 8134, -10221, -13326, 670, -7410, -174, -17323, -1935, 1003, -5570, 5767, -11227, -5479, 13544, 12296, 1256, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 2.4604190912214108e-05, 2.7016358217224479e-05, 1.5158371752477251e-05, 1.5439060007338412e-05, 2.0219995349179953e-05, 2.1751404347014613e-05, 1.2957667422597297e-05, 1.732062446535565e-05, 2.3585345843457617e-05, 2.2915799490874633e-05, 1.9558219719328918e-05, 2.1631320123560727e-05, 2.026373113039881e-05, 2.1726569684688002e-05, 1.5312920368160121e-05, 1.4163344530970789e-05, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[4*400] = { 
  -77, -48, -29, -7, 37, -39, 11, -38, 62, 62, 67, 33, 1, -21, 29, 38, -43, 5, -37, 13, 23, -23, -19, 4, 55, 76, 90, 19, 38, -41, -17, 32, -72, -21, 0, -11, 15, -53, -15, -28, 36, 44, 25, 52, -4, -106, -22, 3, -51, 15, -36, 22, 27, -30, -20, -30, 62, 15, 25, 9, 26, -68, -2, 45, -58, -18, -6, 1, 40, 0, 30, -10, 32, 47, 44, -15, 20, -58, -1, 60, -59, 10, -40, -46, -1, -20, -25, 14, 59, 22, 37, 64, 5, -73, -15, 20, -48, -33, -37, 1, 39, -43, -27, -35, 44, 43, -4, 11, -22, -24, -17, 6, -11, 26, 13, 0, 21, -31, -3, 12, 22, 27, 22, 8, -4, -46, 12, 14, -22, -8, -50, 7, 11, -49, -11, 9, 55, -3, 2, 42, -18, -45, -47, 1, -57, 5, -61, -36, -2, 25, -11, -21, -8, -5, 29, 32, -27, -36, 23, -18, -51, -27, -10, -9, 17, 0, -4, -44, 0, 24, -2, 17, 7, -30, -2, 24, -22, 23, -32, -29, 33, 11, -40, 6, 67, 64, 53, 38, 55, -60, 21, 85, -88, -29, 11, 27, 40, 34, 48, -1, 73, 61, 59, 0, 31, -43, 66, 35, -76, -63, -53, -46, 25, -13, 32, -41, 68, 35, 76, -11, 22, -96, -6, 1, -59, -44, -71, -28, 23, -32, 20, -28, 21, 65, 28, 44, 29, -36, -11, -20, -74, -6, -70, -49, 37, -28, 3, -23, 20, 28, 64, -21, -10, -21, 35, 19, -13, -7, -62, -30, 4, -32, -9, 3, 27, 24, 65, -16, 24, -28, 47, -12, -54, -42, -63, -52, 61, -23, 8, -56, 42, 19, 33, 13, 34, -47, 28, 39, -24, -51, -37, -60, 24, -67, 15, -35, 75, 8, 17, 22, 39, -45, 29, -1, -11, 34, -39, -10, 6, -32, -23, -43, 32, 64, 53, -5, -34, -4, 38, 28, -55, 3, -24, -4, 24, -48, 8, 8, 58, 0, 63, 10, 26, -8, 24, 20, -34, 2, -84, 1, 32, -35, 25, -16, 57, 63, 39, 14, 11, -47, 19, -1, -57, -44, -41, -24, 23, -22, 12, -68, 34, 61, 10, -14, 8, -13, -21, 26, -14, 0, -71, -16, 43, -32, 6, -27, 65, 48, 44, 7, 25, -55, -27, 26, -49, -16, -2, 28, 64, 3, 45, 4, 10, -3, 41, 7, 22, -69, -10, 61, 
  66, -15, -23, -44, -13, -79, -7, -84, 48, 5, -10, 9, -58, 59, -83, -24, 37, 31, -26, -56, -29, -32, -22, -45, 46, -31, -3, 63, -26, 75, -55, -21, 4, -22, -49, -16, -11, -37, -24, -65, 35, 7, 38, 53, -47, 64, -15, -33, 64, 49, -32, -19, 14, -42, -44, -7, -6, -6, 15, 45, -8, 51, -48, -54, 42, 14, -31, -39, 0, -33, -41, -51, 43, -24, 63, 61, -2, 94, 3, -52, 58, 37, 23, 7, -48, -5, -50, -13, 43, -15, -49, 42, -60, 63, 3, -62, 71, -21, 27, -21, 12, 14, 23, 17, 44, -16, 29, 41, -40, 20, 21, -54, 28, 5, 11, -26, -16, -1, -4, -5, -29, 13, -5, -11, 4, 45, -9, -17, 80, 47, 4, -13, -12, -80, 1, -33, 14, -42, -10, 55, -48, 56, -25, -17, 61, 17, -20, -8, -30, 18, -12, 7, 3, 0, -7, 90, -15, 72, 25, -50, 37, 25, -1, -47, -59, -49, 0, -30, 50, -35, 16, 28, -45, 74, -7, -46, 67, -7, -24, -23, -31, -31, -23, -16, 14, -57, -6, 36, -35, 49, -43, 15, 36, 47, -28, -52, 17, -47, 6, -18, 46, -30, -4, 57, -34, 34, -66, -25, 48, 51, 24, -17, -47, -13, -10, -43, -5, -27, -28, 64, -63, 39, -55, -46, 51, -3, -5, -53, -21, -22, 6, -21, 12, -23, 15, 32, -34, 11, -56, -62, 13, 34, -35, -53, -54, -88, 3, -55, 15, -10, 3, 14, -19, 41, 9, 20, 54, 19, -24, 11, 4, -7, -50, 3, 1, -37, 11, 67, 7, 21, -33, -66, 72, -23, -28, 22, 13, 13, -6, -6, 3, -5, 15, 49, -60, 46, -51, 9, 48, 45, 28, -38, -29, -3, 17, -13, 79, -59, 24, 46, 7, 54, -14, 16, 46, -2, 1, -50, -30, -46, 9, -28, -7, 6, 3, 22, -46, 32, -45, -62, 7, -41, -9, -38, -43, -34, -50, -44, -1, -65, 16, -17, -53, 19, -62, -14, 11, -55, -70, -78, -56, -101, -15, -127, -9, -71, 4, -58, -19, 65, -41, -12, 7, 0, -33, -48, -68, -105, -8, -99, -9, -32, 14, 11, -69, 50, -15, -64, -13, -11, -35, -62, -59, -85, -36, -79, 29, -62, -14, 35, -69, 30, -37, -54, 24, 22, -23, -43, -68, -91, -75, -46, 3, -47, 8, 7, -33, 21, -81, -76, 
  -16, -35, 22, 56, -26, 48, 2, 12, -32, -63, 5, -62, -68, 51, 83, 21, 9, -64, -29, 35, -33, 41, -48, 28, -77, -4, -21, -51, -38, 39, 51, 25, 30, -67, -31, 53, -51, 21, -4, -6, -64, -11, -62, -85, -24, 22, 59, 29, 14, -55, -18, 10, -14, 36, -20, 5, -21, 4, -38, -96, -36, 69, 52, 49, -3, -40, -19, 72, -28, 31, -18, 45, -58, 4, -4, -54, -15, 68, 55, -9, 1, -41, -39, 48, -57, 23, 0, -7, -22, -25, -41, -57, 7, 44, 54, 8, 18, -48, 14, 4, -40, 30, -13, 12, -75, 1, -53, -27, -26, 23, 42, 18, 3, -48, 31, 1, 18, -12, -36, 36, -25, -21, -12, -77, 20, 20, 61, -20, 3, -34, 25, -3, -10, -13, -53, 14, -2, -14, 25, -25, 8, 26, 51, 14, 35, -20, -17, -12, 10, 28, -52, 37, -10, -56, -14, -76, -20, 46, 57, -8, 37, -46, -25, 29, -30, -1, 2, -24, -64, 12, -6, -58, -42, 60, 6, -13, 36, -85, -17, 17, -17, 48, -15, 23, -57, -20, -36, -101, -40, 27, 8, -7, 35, -80, 5, 5, -40, 28, 3, 35, -28, 8, -15, -120, -23, 42, 62, 7, 20, -86, -44, 30, -70, 1, 0, -2, -28, -21, -55, -38, -30, 37, 44, -23, 1, -73, 47, 4, -76, 5, -10, 43, -1, 20, -2, -76, -35, 23, 60, -10, 52, -56, 41, 17, -21, 6, 1, 15, -78, -37, -34, -92, -49, 24, 41, -18, -3, -48, 24, 34, -71, 21, -23, 21, -35, 14, -25, -45, -42, 2, 33, 17, 10, -70, -36, -10, -24, -3, -26, 19, -53, -63, -46, -37, -37, 53, 60, -9, 20, -61, 41, 2, 0, -18, -36, 6, -40, -25, -12, -107, 22, 55, 46, -12, 27, -26, -41, 15, -54, 26, 18, 9, -50, -6, -35, -97, -24, 2, 47, -7, -5, -18, -4, 32, -31, -17, 23, -8, -38, -46, -21, -39, 27, 45, 59, -12, 55, 5, -4, 6, -9, 37, -15, 19, -28, -17, -62, -44, 2, 23, 14, -40, 67, -35, 27, 6, -47, 49, -27, 49, -43, -7, -60, -57, 0, 80, 36, 22, 4, -2, 45, 22, -65, -6, 22, 31, -55, -54, -37, -27, 13, 54, 43, -27, 2, -33, -35, 54, -78, 30, 4, 21, -33, 2, -2, -78, 10, 62, 76, -24, 
  -77, 64, 41, 15, 0, 27, -2, 4, -77, 23, -62, -11, 30, -63, -6, 15, -63, -1, 33, -6, 16, 52, 15, 34, -1, 15, -77, 5, -4, -86, -35, -14, -20, 5, 37, 14, -32, 21, 33, 29, -17, -17, -63, -4, -5, -93, 10, -11, -37, 32, 64, 25, 7, 14, 6, 24, -40, -16, -90, 44, 45, -54, -30, -30, -58, 60, 26, -12, 17, 42, 55, 0, -40, 38, -71, -16, 42, -111, -32, -35, -35, 39, 48, 25, -22, 9, 20, 14, -16, 34, -43, 11, 26, -42, -14, -10, -73, 23, 10, 4, -8, 22, 38, 32, 7, -16, -38, -16, 46, -65, -25, 5, -28, 61, 53, 1, 10, 12, -2, 29, 7, 31, -42, 30, 17, -73, -30, 4, -53, 50, 66, 25, -30, 31, 36, 30, -53, -15, -69, -26, -9, -78, -29, -10, -97, 16, 14, 46, -14, 7, 26, 21, -18, -4, -37, 3, -2, -89, -30, 16, -36, 16, 55, 16, -8, -12, 31, 34, -26, 11, 6, 39, 7, -42, -32, -12, -18, 29, 42, 7, -25, 13, 44, 8, -48, -15, -40, 48, -10, -45, -31, -4, -41, 66, 67, 16, 5, 38, 6, 26, 2, 2, -81, 36, 14, -115, 8, -13, -73, 19, 45, 50, -6, 7, 27, 18, -35, 16, -41, 20, 46, -104, -20, 4, -55, 4, 45, 61, 16, 8, 60, 45, -36, -10, -49, 20, -8, -66, 10, 44, -56, 7, 13, 37, 3, -2, 14, 44, -53, -14, -21, 14, -4, -52, -36, -28, -58, 30, 32, 51, -5, -4, 14, 33, 1, -34, -27, -30, 45, -93, 12, 49, -69, 29, 40, 10, 1, 18, 22, 21, -55, -5, -66, -13, 51, -56, 18, -8, -65, 68, 70, 13, 22, 1, 46, 49, -33, 25, -22, 28, 19, -59, 29, 3, -31, -2, 75, 0, -11, 33, 44, -10, -19, 35, -61, -13, -10, -83, -33, 9, -76, 66, 28, 15, 7, 31, 66, 33, -54, 0, -61, -40, 18, -41, -8, 12, -34, 5, 50, 26, 13, 40, 55, 11, -35, 0, -40, 6, 7, -48, -6, 25, -79, 66, 45, 43, 23, 24, 53, 37, -49, 45, -48, 45, 9, -84, 11, -24, -58, 11, 48, 3, 45, 31, 45, 30, -44, 28, -4, 22, 21, -76, 0, -6, -87, 18, 71, 18, 2, 19, 69, 41, 0, -8, -4, 17, -15, -103, -51, -8, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 4,400 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0033589457161724567, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[4] = { 160, 3630, 9502, -7138, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<1, float> quant11_scale = { 1, { 2.8028620363329537e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0033854166977107525, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0051027671433985233, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0051027671433985233, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.0051027671433985233, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0051027671433985233, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0083444695919752121, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0083444695919752121, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0083444695919752121, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0083444695919752121, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.1236698254942894, } };
const TfArray<1, int> quant21_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
